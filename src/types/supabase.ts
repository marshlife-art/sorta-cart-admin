/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/Members": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Members.id"];
          UserId?: parameters["rowFilter.Members.UserId"];
          registration_email?: parameters["rowFilter.Members.registration_email"];
          name?: parameters["rowFilter.Members.name"];
          phone?: parameters["rowFilter.Members.phone"];
          address?: parameters["rowFilter.Members.address"];
          discount?: parameters["rowFilter.Members.discount"];
          discount_type?: parameters["rowFilter.Members.discount_type"];
          fees_paid?: parameters["rowFilter.Members.fees_paid"];
          store_credit?: parameters["rowFilter.Members.store_credit"];
          shares?: parameters["rowFilter.Members.shares"];
          member_type?: parameters["rowFilter.Members.member_type"];
          data?: parameters["rowFilter.Members.data"];
          createdAt?: parameters["rowFilter.Members.createdAt"];
          updatedAt?: parameters["rowFilter.Members.updatedAt"];
          /** admin user */
          is_admin?: parameters["rowFilter.Members.is_admin"];
          fts?: parameters["rowFilter.Members.fts"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Members"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Members */
          Members?: definitions["Members"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Members.id"];
          UserId?: parameters["rowFilter.Members.UserId"];
          registration_email?: parameters["rowFilter.Members.registration_email"];
          name?: parameters["rowFilter.Members.name"];
          phone?: parameters["rowFilter.Members.phone"];
          address?: parameters["rowFilter.Members.address"];
          discount?: parameters["rowFilter.Members.discount"];
          discount_type?: parameters["rowFilter.Members.discount_type"];
          fees_paid?: parameters["rowFilter.Members.fees_paid"];
          store_credit?: parameters["rowFilter.Members.store_credit"];
          shares?: parameters["rowFilter.Members.shares"];
          member_type?: parameters["rowFilter.Members.member_type"];
          data?: parameters["rowFilter.Members.data"];
          createdAt?: parameters["rowFilter.Members.createdAt"];
          updatedAt?: parameters["rowFilter.Members.updatedAt"];
          /** admin user */
          is_admin?: parameters["rowFilter.Members.is_admin"];
          fts?: parameters["rowFilter.Members.fts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Members.id"];
          UserId?: parameters["rowFilter.Members.UserId"];
          registration_email?: parameters["rowFilter.Members.registration_email"];
          name?: parameters["rowFilter.Members.name"];
          phone?: parameters["rowFilter.Members.phone"];
          address?: parameters["rowFilter.Members.address"];
          discount?: parameters["rowFilter.Members.discount"];
          discount_type?: parameters["rowFilter.Members.discount_type"];
          fees_paid?: parameters["rowFilter.Members.fees_paid"];
          store_credit?: parameters["rowFilter.Members.store_credit"];
          shares?: parameters["rowFilter.Members.shares"];
          member_type?: parameters["rowFilter.Members.member_type"];
          data?: parameters["rowFilter.Members.data"];
          createdAt?: parameters["rowFilter.Members.createdAt"];
          updatedAt?: parameters["rowFilter.Members.updatedAt"];
          /** admin user */
          is_admin?: parameters["rowFilter.Members.is_admin"];
          fts?: parameters["rowFilter.Members.fts"];
        };
        body: {
          /** Members */
          Members?: definitions["Members"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/OrderLineItems": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.OrderLineItems.id"];
          OrderId?: parameters["rowFilter.OrderLineItems.OrderId"];
          WholesaleOrderId?: parameters["rowFilter.OrderLineItems.WholesaleOrderId"];
          price?: parameters["rowFilter.OrderLineItems.price"];
          quantity?: parameters["rowFilter.OrderLineItems.quantity"];
          total?: parameters["rowFilter.OrderLineItems.total"];
          kind?: parameters["rowFilter.OrderLineItems.kind"];
          description?: parameters["rowFilter.OrderLineItems.description"];
          vendor?: parameters["rowFilter.OrderLineItems.vendor"];
          selected_unit?: parameters["rowFilter.OrderLineItems.selected_unit"];
          data?: parameters["rowFilter.OrderLineItems.data"];
          createdAt?: parameters["rowFilter.OrderLineItems.createdAt"];
          updatedAt?: parameters["rowFilter.OrderLineItems.updatedAt"];
          status?: parameters["rowFilter.OrderLineItems.status"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["OrderLineItems"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** OrderLineItems */
          OrderLineItems?: definitions["OrderLineItems"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.OrderLineItems.id"];
          OrderId?: parameters["rowFilter.OrderLineItems.OrderId"];
          WholesaleOrderId?: parameters["rowFilter.OrderLineItems.WholesaleOrderId"];
          price?: parameters["rowFilter.OrderLineItems.price"];
          quantity?: parameters["rowFilter.OrderLineItems.quantity"];
          total?: parameters["rowFilter.OrderLineItems.total"];
          kind?: parameters["rowFilter.OrderLineItems.kind"];
          description?: parameters["rowFilter.OrderLineItems.description"];
          vendor?: parameters["rowFilter.OrderLineItems.vendor"];
          selected_unit?: parameters["rowFilter.OrderLineItems.selected_unit"];
          data?: parameters["rowFilter.OrderLineItems.data"];
          createdAt?: parameters["rowFilter.OrderLineItems.createdAt"];
          updatedAt?: parameters["rowFilter.OrderLineItems.updatedAt"];
          status?: parameters["rowFilter.OrderLineItems.status"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.OrderLineItems.id"];
          OrderId?: parameters["rowFilter.OrderLineItems.OrderId"];
          WholesaleOrderId?: parameters["rowFilter.OrderLineItems.WholesaleOrderId"];
          price?: parameters["rowFilter.OrderLineItems.price"];
          quantity?: parameters["rowFilter.OrderLineItems.quantity"];
          total?: parameters["rowFilter.OrderLineItems.total"];
          kind?: parameters["rowFilter.OrderLineItems.kind"];
          description?: parameters["rowFilter.OrderLineItems.description"];
          vendor?: parameters["rowFilter.OrderLineItems.vendor"];
          selected_unit?: parameters["rowFilter.OrderLineItems.selected_unit"];
          data?: parameters["rowFilter.OrderLineItems.data"];
          createdAt?: parameters["rowFilter.OrderLineItems.createdAt"];
          updatedAt?: parameters["rowFilter.OrderLineItems.updatedAt"];
          status?: parameters["rowFilter.OrderLineItems.status"];
        };
        body: {
          /** OrderLineItems */
          OrderLineItems?: definitions["OrderLineItems"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Orders": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Orders.id"];
          UserId?: parameters["rowFilter.Orders.UserId"];
          status?: parameters["rowFilter.Orders.status"];
          payment_status?: parameters["rowFilter.Orders.payment_status"];
          shipment_status?: parameters["rowFilter.Orders.shipment_status"];
          total?: parameters["rowFilter.Orders.total"];
          subtotal?: parameters["rowFilter.Orders.subtotal"];
          name?: parameters["rowFilter.Orders.name"];
          email?: parameters["rowFilter.Orders.email"];
          phone?: parameters["rowFilter.Orders.phone"];
          address?: parameters["rowFilter.Orders.address"];
          notes?: parameters["rowFilter.Orders.notes"];
          email_sent?: parameters["rowFilter.Orders.email_sent"];
          item_count?: parameters["rowFilter.Orders.item_count"];
          history?: parameters["rowFilter.Orders.history"];
          createdAt?: parameters["rowFilter.Orders.createdAt"];
          updatedAt?: parameters["rowFilter.Orders.updatedAt"];
          MemberId?: parameters["rowFilter.Orders.MemberId"];
          fts?: parameters["rowFilter.Orders.fts"];
          api_key?: parameters["rowFilter.Orders.api_key"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Orders"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Orders */
          Orders?: definitions["Orders"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Orders.id"];
          UserId?: parameters["rowFilter.Orders.UserId"];
          status?: parameters["rowFilter.Orders.status"];
          payment_status?: parameters["rowFilter.Orders.payment_status"];
          shipment_status?: parameters["rowFilter.Orders.shipment_status"];
          total?: parameters["rowFilter.Orders.total"];
          subtotal?: parameters["rowFilter.Orders.subtotal"];
          name?: parameters["rowFilter.Orders.name"];
          email?: parameters["rowFilter.Orders.email"];
          phone?: parameters["rowFilter.Orders.phone"];
          address?: parameters["rowFilter.Orders.address"];
          notes?: parameters["rowFilter.Orders.notes"];
          email_sent?: parameters["rowFilter.Orders.email_sent"];
          item_count?: parameters["rowFilter.Orders.item_count"];
          history?: parameters["rowFilter.Orders.history"];
          createdAt?: parameters["rowFilter.Orders.createdAt"];
          updatedAt?: parameters["rowFilter.Orders.updatedAt"];
          MemberId?: parameters["rowFilter.Orders.MemberId"];
          fts?: parameters["rowFilter.Orders.fts"];
          api_key?: parameters["rowFilter.Orders.api_key"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Orders.id"];
          UserId?: parameters["rowFilter.Orders.UserId"];
          status?: parameters["rowFilter.Orders.status"];
          payment_status?: parameters["rowFilter.Orders.payment_status"];
          shipment_status?: parameters["rowFilter.Orders.shipment_status"];
          total?: parameters["rowFilter.Orders.total"];
          subtotal?: parameters["rowFilter.Orders.subtotal"];
          name?: parameters["rowFilter.Orders.name"];
          email?: parameters["rowFilter.Orders.email"];
          phone?: parameters["rowFilter.Orders.phone"];
          address?: parameters["rowFilter.Orders.address"];
          notes?: parameters["rowFilter.Orders.notes"];
          email_sent?: parameters["rowFilter.Orders.email_sent"];
          item_count?: parameters["rowFilter.Orders.item_count"];
          history?: parameters["rowFilter.Orders.history"];
          createdAt?: parameters["rowFilter.Orders.createdAt"];
          updatedAt?: parameters["rowFilter.Orders.updatedAt"];
          MemberId?: parameters["rowFilter.Orders.MemberId"];
          fts?: parameters["rowFilter.Orders.fts"];
          api_key?: parameters["rowFilter.Orders.api_key"];
        };
        body: {
          /** Orders */
          Orders?: definitions["Orders"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/WholesaleOrders": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.WholesaleOrders.id"];
          vendor?: parameters["rowFilter.WholesaleOrders.vendor"];
          notes?: parameters["rowFilter.WholesaleOrders.notes"];
          status?: parameters["rowFilter.WholesaleOrders.status"];
          payment_status?: parameters["rowFilter.WholesaleOrders.payment_status"];
          shipment_status?: parameters["rowFilter.WholesaleOrders.shipment_status"];
          createdAt?: parameters["rowFilter.WholesaleOrders.createdAt"];
          updatedAt?: parameters["rowFilter.WholesaleOrders.updatedAt"];
          calc_adjustments?: parameters["rowFilter.WholesaleOrders.calc_adjustments"];
          square_status?: parameters["rowFilter.WholesaleOrders.square_status"];
          square_loaded_at?: parameters["rowFilter.WholesaleOrders.square_loaded_at"];
          data?: parameters["rowFilter.WholesaleOrders.data"];
          api_key?: parameters["rowFilter.WholesaleOrders.api_key"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["WholesaleOrders"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** WholesaleOrders */
          WholesaleOrders?: definitions["WholesaleOrders"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.WholesaleOrders.id"];
          vendor?: parameters["rowFilter.WholesaleOrders.vendor"];
          notes?: parameters["rowFilter.WholesaleOrders.notes"];
          status?: parameters["rowFilter.WholesaleOrders.status"];
          payment_status?: parameters["rowFilter.WholesaleOrders.payment_status"];
          shipment_status?: parameters["rowFilter.WholesaleOrders.shipment_status"];
          createdAt?: parameters["rowFilter.WholesaleOrders.createdAt"];
          updatedAt?: parameters["rowFilter.WholesaleOrders.updatedAt"];
          calc_adjustments?: parameters["rowFilter.WholesaleOrders.calc_adjustments"];
          square_status?: parameters["rowFilter.WholesaleOrders.square_status"];
          square_loaded_at?: parameters["rowFilter.WholesaleOrders.square_loaded_at"];
          data?: parameters["rowFilter.WholesaleOrders.data"];
          api_key?: parameters["rowFilter.WholesaleOrders.api_key"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.WholesaleOrders.id"];
          vendor?: parameters["rowFilter.WholesaleOrders.vendor"];
          notes?: parameters["rowFilter.WholesaleOrders.notes"];
          status?: parameters["rowFilter.WholesaleOrders.status"];
          payment_status?: parameters["rowFilter.WholesaleOrders.payment_status"];
          shipment_status?: parameters["rowFilter.WholesaleOrders.shipment_status"];
          createdAt?: parameters["rowFilter.WholesaleOrders.createdAt"];
          updatedAt?: parameters["rowFilter.WholesaleOrders.updatedAt"];
          calc_adjustments?: parameters["rowFilter.WholesaleOrders.calc_adjustments"];
          square_status?: parameters["rowFilter.WholesaleOrders.square_status"];
          square_loaded_at?: parameters["rowFilter.WholesaleOrders.square_loaded_at"];
          data?: parameters["rowFilter.WholesaleOrders.data"];
          api_key?: parameters["rowFilter.WholesaleOrders.api_key"];
        };
        body: {
          /** WholesaleOrders */
          WholesaleOrders?: definitions["WholesaleOrders"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/catmap": {
    get: {
      parameters: {
        query: {
          from?: parameters["rowFilter.catmap.from"];
          to?: parameters["rowFilter.catmap.to"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["catmap"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** catmap */
          catmap?: definitions["catmap"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          from?: parameters["rowFilter.catmap.from"];
          to?: parameters["rowFilter.catmap.to"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          from?: parameters["rowFilter.catmap.from"];
          to?: parameters["rowFilter.catmap.to"];
        };
        body: {
          /** catmap */
          catmap?: definitions["catmap"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/products": {
    get: {
      parameters: {
        query: {
          unf?: parameters["rowFilter.products.unf"];
          upc_code?: parameters["rowFilter.products.upc_code"];
          category?: parameters["rowFilter.products.category"];
          sub_category?: parameters["rowFilter.products.sub_category"];
          name?: parameters["rowFilter.products.name"];
          pk?: parameters["rowFilter.products.pk"];
          size?: parameters["rowFilter.products.size"];
          unit_type?: parameters["rowFilter.products.unit_type"];
          ws_price?: parameters["rowFilter.products.ws_price"];
          u_price?: parameters["rowFilter.products.u_price"];
          ws_price_cost?: parameters["rowFilter.products.ws_price_cost"];
          u_price_cost?: parameters["rowFilter.products.u_price_cost"];
          codes?: parameters["rowFilter.products.codes"];
          vendor?: parameters["rowFilter.products.vendor"];
          import_tag?: parameters["rowFilter.products.import_tag"];
          createdAt?: parameters["rowFilter.products.createdAt"];
          updatedAt?: parameters["rowFilter.products.updatedAt"];
          count_on_hand?: parameters["rowFilter.products.count_on_hand"];
          no_backorder?: parameters["rowFilter.products.no_backorder"];
          plu?: parameters["rowFilter.products.plu"];
          id?: parameters["rowFilter.products.id"];
          /** original description from vendor pricesheet */
          description_orig?: parameters["rowFilter.products.description_orig"];
          /** hand-edited description, intended to persist after upsert */
          description_edit?: parameters["rowFilter.products.description_edit"];
          description?: parameters["rowFilter.products.description"];
          featured?: parameters["rowFilter.products.featured"];
          sq_variation_id?: parameters["rowFilter.products.sq_variation_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["products"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** products */
          products?: definitions["products"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          unf?: parameters["rowFilter.products.unf"];
          upc_code?: parameters["rowFilter.products.upc_code"];
          category?: parameters["rowFilter.products.category"];
          sub_category?: parameters["rowFilter.products.sub_category"];
          name?: parameters["rowFilter.products.name"];
          pk?: parameters["rowFilter.products.pk"];
          size?: parameters["rowFilter.products.size"];
          unit_type?: parameters["rowFilter.products.unit_type"];
          ws_price?: parameters["rowFilter.products.ws_price"];
          u_price?: parameters["rowFilter.products.u_price"];
          ws_price_cost?: parameters["rowFilter.products.ws_price_cost"];
          u_price_cost?: parameters["rowFilter.products.u_price_cost"];
          codes?: parameters["rowFilter.products.codes"];
          vendor?: parameters["rowFilter.products.vendor"];
          import_tag?: parameters["rowFilter.products.import_tag"];
          createdAt?: parameters["rowFilter.products.createdAt"];
          updatedAt?: parameters["rowFilter.products.updatedAt"];
          count_on_hand?: parameters["rowFilter.products.count_on_hand"];
          no_backorder?: parameters["rowFilter.products.no_backorder"];
          plu?: parameters["rowFilter.products.plu"];
          id?: parameters["rowFilter.products.id"];
          /** original description from vendor pricesheet */
          description_orig?: parameters["rowFilter.products.description_orig"];
          /** hand-edited description, intended to persist after upsert */
          description_edit?: parameters["rowFilter.products.description_edit"];
          description?: parameters["rowFilter.products.description"];
          featured?: parameters["rowFilter.products.featured"];
          sq_variation_id?: parameters["rowFilter.products.sq_variation_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          unf?: parameters["rowFilter.products.unf"];
          upc_code?: parameters["rowFilter.products.upc_code"];
          category?: parameters["rowFilter.products.category"];
          sub_category?: parameters["rowFilter.products.sub_category"];
          name?: parameters["rowFilter.products.name"];
          pk?: parameters["rowFilter.products.pk"];
          size?: parameters["rowFilter.products.size"];
          unit_type?: parameters["rowFilter.products.unit_type"];
          ws_price?: parameters["rowFilter.products.ws_price"];
          u_price?: parameters["rowFilter.products.u_price"];
          ws_price_cost?: parameters["rowFilter.products.ws_price_cost"];
          u_price_cost?: parameters["rowFilter.products.u_price_cost"];
          codes?: parameters["rowFilter.products.codes"];
          vendor?: parameters["rowFilter.products.vendor"];
          import_tag?: parameters["rowFilter.products.import_tag"];
          createdAt?: parameters["rowFilter.products.createdAt"];
          updatedAt?: parameters["rowFilter.products.updatedAt"];
          count_on_hand?: parameters["rowFilter.products.count_on_hand"];
          no_backorder?: parameters["rowFilter.products.no_backorder"];
          plu?: parameters["rowFilter.products.plu"];
          id?: parameters["rowFilter.products.id"];
          /** original description from vendor pricesheet */
          description_orig?: parameters["rowFilter.products.description_orig"];
          /** hand-edited description, intended to persist after upsert */
          description_edit?: parameters["rowFilter.products.description_edit"];
          description?: parameters["rowFilter.products.description"];
          featured?: parameters["rowFilter.products.featured"];
          sq_variation_id?: parameters["rowFilter.products.sq_variation_id"];
        };
        body: {
          /** products */
          products?: definitions["products"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/stock": {
    get: {
      parameters: {
        query: {
          variation_id?: parameters["rowFilter.stock.variation_id"];
          name?: parameters["rowFilter.stock.name"];
          description?: parameters["rowFilter.stock.description"];
          price?: parameters["rowFilter.stock.price"];
          unit?: parameters["rowFilter.stock.unit"];
          quantity?: parameters["rowFilter.stock.quantity"];
          sku?: parameters["rowFilter.stock.sku"];
          item_id?: parameters["rowFilter.stock.item_id"];
          created_at?: parameters["rowFilter.stock.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["stock"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** stock */
          stock?: definitions["stock"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          variation_id?: parameters["rowFilter.stock.variation_id"];
          name?: parameters["rowFilter.stock.name"];
          description?: parameters["rowFilter.stock.description"];
          price?: parameters["rowFilter.stock.price"];
          unit?: parameters["rowFilter.stock.unit"];
          quantity?: parameters["rowFilter.stock.quantity"];
          sku?: parameters["rowFilter.stock.sku"];
          item_id?: parameters["rowFilter.stock.item_id"];
          created_at?: parameters["rowFilter.stock.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          variation_id?: parameters["rowFilter.stock.variation_id"];
          name?: parameters["rowFilter.stock.name"];
          description?: parameters["rowFilter.stock.description"];
          price?: parameters["rowFilter.stock.price"];
          unit?: parameters["rowFilter.stock.unit"];
          quantity?: parameters["rowFilter.stock.quantity"];
          sku?: parameters["rowFilter.stock.sku"];
          item_id?: parameters["rowFilter.stock.item_id"];
          created_at?: parameters["rowFilter.stock.created_at"];
        };
        body: {
          /** stock */
          stock?: definitions["stock"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/products_update_id": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/default_products": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/distinct_product_sub_categories": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            category: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/distinct_product_import_tags": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/distinct_product_vendors": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/recent_orders": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/distinct_product_categories": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  Members: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: uuid */
    UserId?: string;
    /** Format: text */
    registration_email?: string;
    /** Format: text */
    name?: string;
    /** Format: text */
    phone?: string;
    /** Format: text */
    address?: string;
    /** Format: smallint */
    discount?: number;
    /** Format: text */
    discount_type?: string;
    /** Format: real */
    fees_paid?: number;
    /** Format: real */
    store_credit?: number;
    /** Format: smallint */
    shares?: number;
    /** Format: text */
    member_type?: string;
    /** Format: jsonb */
    data?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    createdAt?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updatedAt?: string;
    /**
     * Format: boolean
     * @description admin user
     */
    is_admin: boolean;
    /**
     * Format: tsvector
     * @default to_tsvector('english'::regconfig, ((((((COALESCE(name, ''::text) || ' '::text) || COALESCE(phone, ''::text)) || ' '::text) || COALESCE(address, ''::text)) || ' '::text) || COALESCE(registration_email, ''::text)))
     */
    fts?: string;
  };
  OrderLineItems: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `Orders.id`.<fk table='Orders' column='id'/>
     */
    OrderId?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `WholesaleOrders.id`.<fk table='WholesaleOrders' column='id'/>
     */
    WholesaleOrderId?: number;
    /** Format: real */
    price?: number;
    /** Format: smallint */
    quantity?: number;
    /** Format: real */
    total?: number;
    /** Format: text */
    kind?: string;
    /** Format: text */
    description?: string;
    /** Format: text */
    vendor?: string;
    /** Format: text */
    selected_unit?: string;
    /** Format: jsonb */
    data?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    createdAt?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updatedAt?: string;
    /** Format: text */
    status?: string;
  };
  Orders: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: uuid */
    UserId?: string;
    /** Format: text */
    status?: string;
    /** Format: text */
    payment_status?: string;
    /** Format: text */
    shipment_status?: string;
    /** Format: real */
    total?: number;
    /** Format: real */
    subtotal?: number;
    /** Format: text */
    name?: string;
    /** Format: text */
    email?: string;
    /** Format: text */
    phone?: string;
    /** Format: text */
    address?: string;
    /** Format: text */
    notes?: string;
    /** Format: boolean */
    email_sent?: boolean;
    /** Format: smallint */
    item_count?: number;
    /** Format: jsonb */
    history?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    createdAt?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updatedAt?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `Members.id`.<fk table='Members' column='id'/>
     */
    MemberId?: number;
    /**
     * Format: tsvector
     * @default to_tsvector('english'::regconfig, ((((((((COALESCE(name, ''::text) || ' '::text) || COALESCE(email, ''::text)) || ' '::text) || COALESCE(phone, ''::text)) || ' '::text) || COALESCE(address, ''::text)) || ' '::text) || COALESCE(notes, ''::text)))
     */
    fts?: string;
    /**
     * Format: uuid
     * @default extensions.uuid_generate_v4()
     */
    api_key?: string;
  };
  WholesaleOrders: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    vendor?: string;
    /** Format: text */
    notes?: string;
    /** Format: text */
    status?: string;
    /** Format: text */
    payment_status?: string;
    /** Format: text */
    shipment_status?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    createdAt?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updatedAt?: string;
    /** Format: boolean */
    calc_adjustments?: boolean;
    /** Format: text */
    square_status?: string;
    /** Format: timestamp with time zone */
    square_loaded_at?: string;
    /** Format: jsonb */
    data?: string;
    /**
     * Format: uuid
     * @default extensions.uuid_generate_v4()
     */
    api_key: string;
  };
  /** @description product category and sub_category mappings */
  catmap: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    from: string;
    /** Format: text */
    to: string;
  };
  products: {
    /** Format: text */
    unf?: string;
    /** Format: text */
    upc_code?: string;
    /** Format: text */
    category?: string;
    /** Format: text */
    sub_category?: string;
    /** Format: text */
    name?: string;
    /** Format: integer */
    pk?: number;
    /** Format: text */
    size?: string;
    /** Format: text */
    unit_type?: string;
    /** Format: double precision */
    ws_price?: number;
    /** Format: double precision */
    u_price?: number;
    /** Format: double precision */
    ws_price_cost?: number;
    /** Format: double precision */
    u_price_cost?: number;
    /** Format: text */
    codes?: string;
    /** Format: text */
    vendor?: string;
    /** Format: text */
    import_tag?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    createdAt?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updatedAt?: string;
    /** Format: integer */
    count_on_hand?: number;
    /** Format: boolean */
    no_backorder?: boolean;
    /** Format: text */
    plu?: string;
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Format: text
     * @description original description from vendor pricesheet
     */
    description_orig?: string;
    /**
     * Format: text
     * @description hand-edited description, intended to persist after upsert
     */
    description_edit?: string;
    /**
     * Format: text
     * @default COALESCE(description_edit, description_orig)
     */
    description?: string;
    /** Format: boolean */
    featured?: boolean;
    /** Format: text */
    sq_variation_id?: string;
  };
  /** @description square on-hand inventory */
  stock: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    variation_id: string;
    /** Format: text */
    name?: string;
    /** Format: text */
    description?: string;
    /** Format: integer */
    price?: number;
    /** Format: text */
    unit?: string;
    /** Format: smallint */
    quantity?: number;
    /** Format: text */
    sku?: string;
    /** Format: text */
    item_id?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
  };
}

export interface parameters {
  /** @description Preference */
  preferParams: "params=single-object";
  /** @description Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** @description Preference */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description Members */
  "body.Members": definitions["Members"];
  /** Format: bigint */
  "rowFilter.Members.id": string;
  /** Format: uuid */
  "rowFilter.Members.UserId": string;
  /** Format: text */
  "rowFilter.Members.registration_email": string;
  /** Format: text */
  "rowFilter.Members.name": string;
  /** Format: text */
  "rowFilter.Members.phone": string;
  /** Format: text */
  "rowFilter.Members.address": string;
  /** Format: smallint */
  "rowFilter.Members.discount": string;
  /** Format: text */
  "rowFilter.Members.discount_type": string;
  /** Format: real */
  "rowFilter.Members.fees_paid": string;
  /** Format: real */
  "rowFilter.Members.store_credit": string;
  /** Format: smallint */
  "rowFilter.Members.shares": string;
  /** Format: text */
  "rowFilter.Members.member_type": string;
  /** Format: jsonb */
  "rowFilter.Members.data": string;
  /** Format: timestamp with time zone */
  "rowFilter.Members.createdAt": string;
  /** Format: timestamp with time zone */
  "rowFilter.Members.updatedAt": string;
  /**
   * Format: boolean
   * @description admin user
   */
  "rowFilter.Members.is_admin": string;
  /** Format: tsvector */
  "rowFilter.Members.fts": string;
  /** @description OrderLineItems */
  "body.OrderLineItems": definitions["OrderLineItems"];
  /** Format: bigint */
  "rowFilter.OrderLineItems.id": string;
  /** Format: bigint */
  "rowFilter.OrderLineItems.OrderId": string;
  /** Format: bigint */
  "rowFilter.OrderLineItems.WholesaleOrderId": string;
  /** Format: real */
  "rowFilter.OrderLineItems.price": string;
  /** Format: smallint */
  "rowFilter.OrderLineItems.quantity": string;
  /** Format: real */
  "rowFilter.OrderLineItems.total": string;
  /** Format: text */
  "rowFilter.OrderLineItems.kind": string;
  /** Format: text */
  "rowFilter.OrderLineItems.description": string;
  /** Format: text */
  "rowFilter.OrderLineItems.vendor": string;
  /** Format: text */
  "rowFilter.OrderLineItems.selected_unit": string;
  /** Format: jsonb */
  "rowFilter.OrderLineItems.data": string;
  /** Format: timestamp with time zone */
  "rowFilter.OrderLineItems.createdAt": string;
  /** Format: timestamp with time zone */
  "rowFilter.OrderLineItems.updatedAt": string;
  /** Format: text */
  "rowFilter.OrderLineItems.status": string;
  /** @description Orders */
  "body.Orders": definitions["Orders"];
  /** Format: bigint */
  "rowFilter.Orders.id": string;
  /** Format: uuid */
  "rowFilter.Orders.UserId": string;
  /** Format: text */
  "rowFilter.Orders.status": string;
  /** Format: text */
  "rowFilter.Orders.payment_status": string;
  /** Format: text */
  "rowFilter.Orders.shipment_status": string;
  /** Format: real */
  "rowFilter.Orders.total": string;
  /** Format: real */
  "rowFilter.Orders.subtotal": string;
  /** Format: text */
  "rowFilter.Orders.name": string;
  /** Format: text */
  "rowFilter.Orders.email": string;
  /** Format: text */
  "rowFilter.Orders.phone": string;
  /** Format: text */
  "rowFilter.Orders.address": string;
  /** Format: text */
  "rowFilter.Orders.notes": string;
  /** Format: boolean */
  "rowFilter.Orders.email_sent": string;
  /** Format: smallint */
  "rowFilter.Orders.item_count": string;
  /** Format: jsonb */
  "rowFilter.Orders.history": string;
  /** Format: timestamp with time zone */
  "rowFilter.Orders.createdAt": string;
  /** Format: timestamp with time zone */
  "rowFilter.Orders.updatedAt": string;
  /** Format: bigint */
  "rowFilter.Orders.MemberId": string;
  /** Format: tsvector */
  "rowFilter.Orders.fts": string;
  /** Format: uuid */
  "rowFilter.Orders.api_key": string;
  /** @description WholesaleOrders */
  "body.WholesaleOrders": definitions["WholesaleOrders"];
  /** Format: bigint */
  "rowFilter.WholesaleOrders.id": string;
  /** Format: text */
  "rowFilter.WholesaleOrders.vendor": string;
  /** Format: text */
  "rowFilter.WholesaleOrders.notes": string;
  /** Format: text */
  "rowFilter.WholesaleOrders.status": string;
  /** Format: text */
  "rowFilter.WholesaleOrders.payment_status": string;
  /** Format: text */
  "rowFilter.WholesaleOrders.shipment_status": string;
  /** Format: timestamp with time zone */
  "rowFilter.WholesaleOrders.createdAt": string;
  /** Format: timestamp with time zone */
  "rowFilter.WholesaleOrders.updatedAt": string;
  /** Format: boolean */
  "rowFilter.WholesaleOrders.calc_adjustments": string;
  /** Format: text */
  "rowFilter.WholesaleOrders.square_status": string;
  /** Format: timestamp with time zone */
  "rowFilter.WholesaleOrders.square_loaded_at": string;
  /** Format: jsonb */
  "rowFilter.WholesaleOrders.data": string;
  /** Format: uuid */
  "rowFilter.WholesaleOrders.api_key": string;
  /** @description catmap */
  "body.catmap": definitions["catmap"];
  /** Format: text */
  "rowFilter.catmap.from": string;
  /** Format: text */
  "rowFilter.catmap.to": string;
  /** @description products */
  "body.products": definitions["products"];
  /** Format: text */
  "rowFilter.products.unf": string;
  /** Format: text */
  "rowFilter.products.upc_code": string;
  /** Format: text */
  "rowFilter.products.category": string;
  /** Format: text */
  "rowFilter.products.sub_category": string;
  /** Format: text */
  "rowFilter.products.name": string;
  /** Format: integer */
  "rowFilter.products.pk": string;
  /** Format: text */
  "rowFilter.products.size": string;
  /** Format: text */
  "rowFilter.products.unit_type": string;
  /** Format: double precision */
  "rowFilter.products.ws_price": string;
  /** Format: double precision */
  "rowFilter.products.u_price": string;
  /** Format: double precision */
  "rowFilter.products.ws_price_cost": string;
  /** Format: double precision */
  "rowFilter.products.u_price_cost": string;
  /** Format: text */
  "rowFilter.products.codes": string;
  /** Format: text */
  "rowFilter.products.vendor": string;
  /** Format: text */
  "rowFilter.products.import_tag": string;
  /** Format: timestamp with time zone */
  "rowFilter.products.createdAt": string;
  /** Format: timestamp with time zone */
  "rowFilter.products.updatedAt": string;
  /** Format: integer */
  "rowFilter.products.count_on_hand": string;
  /** Format: boolean */
  "rowFilter.products.no_backorder": string;
  /** Format: text */
  "rowFilter.products.plu": string;
  /** Format: text */
  "rowFilter.products.id": string;
  /**
   * Format: text
   * @description original description from vendor pricesheet
   */
  "rowFilter.products.description_orig": string;
  /**
   * Format: text
   * @description hand-edited description, intended to persist after upsert
   */
  "rowFilter.products.description_edit": string;
  /** Format: text */
  "rowFilter.products.description": string;
  /** Format: boolean */
  "rowFilter.products.featured": string;
  /** Format: text */
  "rowFilter.products.sq_variation_id": string;
  /** @description stock */
  "body.stock": definitions["stock"];
  /** Format: text */
  "rowFilter.stock.variation_id": string;
  /** Format: text */
  "rowFilter.stock.name": string;
  /** Format: text */
  "rowFilter.stock.description": string;
  /** Format: integer */
  "rowFilter.stock.price": string;
  /** Format: text */
  "rowFilter.stock.unit": string;
  /** Format: smallint */
  "rowFilter.stock.quantity": string;
  /** Format: text */
  "rowFilter.stock.sku": string;
  /** Format: text */
  "rowFilter.stock.item_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.stock.created_at": string;
}

export interface operations {}

export interface external {}
